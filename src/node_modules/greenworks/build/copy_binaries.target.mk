# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := copy_binaries
### Rules for action "Copy Binaries":
quiet_cmd_binding_gyp_copy_binaries_target_Copy_Binaries = ACTION binding_gyp_copy_binaries_target_Copy_Binaries $@
cmd_binding_gyp_copy_binaries_target_Copy_Binaries = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; python tools/copy_binaries.py /home/nathaniel/Documents/projects/skeleton-sprint-levelbuilder/skeleton-sprint-levelbuilder/src/node_modules/greenworks/deps/steamworks_sdk/redistributable_bin/linux64/libsteam_api.so /home/nathaniel/Documents/projects/skeleton-sprint-levelbuilder/skeleton-sprint-levelbuilder/src/node_modules/greenworks/deps/steamworks_sdk/public/steam/lib/linux64/libsdkencryptedappticket.so "$(builddir)/greenworks-linux64.node" lib

lib: obj := $(abs_obj)
lib: builddir := $(abs_builddir)
lib: TOOLSET := $(TOOLSET)
lib: /home/nathaniel/Documents/projects/skeleton-sprint-levelbuilder/skeleton-sprint-levelbuilder/src/node_modules/greenworks/deps/steamworks_sdk/redistributable_bin/linux64/libsteam_api.so /home/nathaniel/Documents/projects/skeleton-sprint-levelbuilder/skeleton-sprint-levelbuilder/src/node_modules/greenworks/deps/steamworks_sdk/public/steam/lib/linux64/libsdkencryptedappticket.so $(builddir)/greenworks-linux64.node FORCE_DO_CMD
	$(call do_cmd,binding_gyp_copy_binaries_target_Copy_Binaries)

all_deps += lib
action_binding_gyp_copy_binaries_target_Copy_Binaries_outputs := lib


### Rules for final target.
# Build our special outputs first.
$(obj).target/copy_binaries.stamp: | $(action_binding_gyp_copy_binaries_target_Copy_Binaries_outputs)

# Preserve order dependency of special output on deps.
$(action_binding_gyp_copy_binaries_target_Copy_Binaries_outputs): | $(builddir)/greenworks-linux64.node

$(obj).target/copy_binaries.stamp: TOOLSET := $(TOOLSET)
$(obj).target/copy_binaries.stamp: $(builddir)/greenworks-linux64.node FORCE_DO_CMD
	$(call do_cmd,touch)

all_deps += $(obj).target/copy_binaries.stamp
# Add target alias
.PHONY: copy_binaries
copy_binaries: $(obj).target/copy_binaries.stamp

# Add target alias to "all" target.
.PHONY: all
all: copy_binaries

